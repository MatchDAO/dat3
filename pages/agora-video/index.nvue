<template>
	<view class="container">
		<view class="container-bg" v-if="!time">
			<image class="container-bg-image" mode="aspectFill" :src='other.portrait'></image>
			<view class="container-bg-mask"></view>
		</view>
		<rtc-surface-view v-if="engine && time" class="fill-view" :uid="isSwitchRender ? otherUid : 0"
			:channelId="this.channelCfg.channelName"></rtc-surface-view>
		<view class="window-view-wrapper" v-if="engine && time" @tap="switchRender">
			<rtc-surface-view class="window-view" :uid="!isSwitchRender ? otherUid : 0"
				:channelId="this.channelCfg.channelName"></rtc-surface-view>
		</view>
		<view class="user-box" v-if="!time">
			<view class="portrait">
				<image class="portrait-image" :src="other.portrait" mode="aspectFill"></image>
			</view>
			<view class="userName">
				<text class="text">{{other.name}}</text>
			</view>
			<view class="price">
				<text class="price-prefix" v-if="type == 2">{{$t('nvuefile.value')}}</text>
				<image class="price-icon" src='/static/aptos-icon.png'></image>
				<text class="price-text">{{formatAptos(Number(feeInfo.videoFee || 0), 5)}} / {{$t('nvuefile.min')}}</text>
			</view>
		</view>
		<view class="control-box">
			<text class="control-text" v-if="time">{{showTime}}</text>
			<text class="wait-time" v-if="!time && type == 1">{{waitTime}}s</text>
			<text class="control-text"
				v-if="!time">{{type == 1 ? $t('nvuefile.awaitingResponse') : $t('nvuefile.connectDes')}}</text>
			<view class="control-btns">
				<view class="control-btn hangUp" @tap="hangUp">
					<image class="control-btn-icon" src='/static/video/hangUp-icon.png'></image>
				</view>
				<view class="control-btn answer" v-if="type == 2 && !time" @tap="answer">
					<image class="control-btn-icon" src='/static/video/answer-icon.png'></image>
				</view>
			</view>
		</view>
		<view class="reward-view" v-if="type == 2 && time">
			<view class="left-border"></view>
			<view class="right-border"></view>
			<view class="bottom-border"></view>
			<view class="top-border"></view>
			<view class='reward-text-wrapper'>
				<text class='reward-text'>{{$t('nvuefile.reward')}}</text>
			</view>
			<view class='reward-items'>
				<view class='reward-item first'>
					<image class='left-icon' src='/static/aptos-icon.png'></image>
					<view class='reward-item-content'>
						<text class='text'>{{reward}}</text>
					</view>
					<image class='right-icon' src='/static/video/lamb-up-icon.png'></image>
				</view>
				<view class='reward-item'>
					<image class='left-icon' src='/static/dat3-icon.png'></image>
					<view class='reward-item-content'>
						<text class='text'>DAT3</text>
						<text class='text'>auto-distribution</text>
					</view>
					<image class='right-icon' src='/static/video/lamb-up-icon.png'></image>
				</view>
			</view>
		</view>
		<view class="popup-content" v-if="showPopup">
			<image class="dialog-bg" src="/static/login/dialog-bg.png" mode="">
				<text class="title">
					{{$t('nvuefile.hangUpTitle')}}
				</text>
				<view class="btns">
					<view class="btn btn-cancel" @click="cancel">
						<text class="text">
							{{$t('nvuefile.hangUpCancel')}}
						</text>
					</view>
					<view class="btn btn-confirm" @click="confirmBack">
						<text class="text">
							{{$t('nvuefile.hangUpConfirm')}}
						</text>
					</view>
				</view>
			</image>
		</view>
	</view>
</template>

<script>
	import { formatAptos } from "@/utils/utilWithVue.js";
	import { viewContractService, getGasFee } from "@/api/viewContractService";
	import config from '@/config/agora.config';
	import permision from "@/js_sdk/wa-permission/permission";
	import RtcEngine, {
		RtcChannel
	} from '@/components/Agora-RTC-JS/index';
	import {
		ClientRole,
		ChannelProfile
	} from '@/components/Agora-RTC-JS/common/Enums';
	import RtcSurfaceView from '@/components/Agora-RTC-JS/RtcSurfaceView';

	import {
		getUserInfo as fetchUserInfo,
		getUserGrade
	} from "@/api/user";
	import {
		callBegin,
		callRequest,
		callAccept,
		callEnd
	} from "@/api/video";
	import {
		getUserInfo
	} from "@/config/auth";
	let app = getApp().globalData;

	export default {
		components: {
			RtcSurfaceView: RtcSurfaceView,
		},
		data() {
			return {
				options: {},
				wallet: {},
				type: 1,
				formatAptos: formatAptos,
				event: {},
				showPopup: false,
				time: 0,
				waitTime: 0,
				reward: 0,
				showTime: '00:00:00',
				agree: false,
				captcha: null,
				account: null,
				me: {},
				other: {},
				otherUid: null,
				engine: undefined,
				channelId: null,
				isSwitchCamera: true,
				isSwitchRender: true,
				gradeInfo: {},
				channelCfg: {},
				feeInfo: {},
				timer: null,
				waitTimer: null,
				audioContext: null
			};
		},
		computed: {},
		async onLoad(options) {
			this.wallet = app.wallet || {};
			this.options = options;
			try {
				let flag = true;
				if (uni.getSystemInfoSync().platform === 'android') {
					const RECORD_AUDIO =  await permision.requestAndroidPermission('android.permission.RECORD_AUDIO');
					const CAMERA = await permision.requestAndroidPermission('android.permission.CAMERA');
					if (RECORD_AUDIO == -1 || CAMERA == -1) {
						flag = false
					}
				}
				if (flag) { 
					this.playAudio()
					this.initData();
					this.initEngine();
				} else {
					uni.showToast({
						icon: "none",
						title: 'Without RECORD_AUDIO or CAMERA Permissions',
						duration: 3000,
						success() {
							setTimeout(() => {
								uni.navigateBack({
									delta: 1,
								});
							}, 3000)
						},
					});
				}
			} catch (error) {
				console.log('error', error); 
			}
		},
		onHide(){
    	this.clearTimer();
		},
		onUnload() {
			this.clearTimer();
		},
		methods: { 
			async getChatFee() {
				let me = this;
				const userCode = me.type == 1 ? me.other.userCode : me.me.userCode;
				const res = await getUserGrade({ userCode });
				const { id, eprice } = res.data || {};
				// const res = await viewContractService({ module: 'routel', func: 'fee_of_mine', args: [address], });
				// const [chatFee, grade, videoFee] = res.data || {};
				me.feeInfo = {
					grade: String(id),
				  videoFee: eprice
				};
			},
			timeoutHandler() {
				this.waitTimer = setInterval(() => {
					if (!this.time && this.waitTime >= 60) {
						this.confirmBack();
					} else {
						this.waitTime = this.waitTime + 1;
					}
				}, 1000);
			},
			playAudio() {
				this.audioContext = uni.createInnerAudioContext();
				this.audioContext.src = '/static/ringtones/good-morning-ambient-ringtone-videos-vlogs-1-129512.mp3';
				this.audioContext.autoplay = true;
				this.audioContext.loop = true;
			},
			destroyAudio() {
				this.audioContext && this.audioContext.destroy();
			},
			clearTimer() {
				this.destroyAudio();
				clearInterval(this.waitTimer);
				clearInterval(this.timer);
				uni.$off('eventCallBack.one_minute');
				uni.$off("WebIM.onCmdMessage")
			},
			$t(text) {
				return app.$t(text);
			},
			cancel() {
				this.showPopup = false;
			},
			async confirmBack() {
				const stateCode = await this.engine.getConnectionState();
				if (stateCode != 1) {
					this.engine.addListener('LeaveChannel', (stats) => {
						this.back();
					});
					this.leaveChannel();
				} else {
					this.back();
				}
			},
			getShowTime(time) {
				// 24
				if (time < 0) {
					return '00:00:00';
				}
				//
				let leave1 = time % (24 * 3600); //
				let hours = Math.floor(leave1 / (3600));
				hours = hours >= 10 ? hours : `0${hours}`;
				//
				let leave2 = leave1 % (3600); //
				let minutes = Math.floor(leave2 / (60));
				minutes = minutes >= 10 ? minutes : `0${minutes}`;
				//
				let leave3 = leave2 % (60); //
				let seconds = Math.round(leave3);
				seconds = seconds >= 10 ? seconds : `0${seconds}`;
				return hours + ':' + minutes + ':' + seconds;
			},
			runTime() {
				const me = this;
				this.destroyAudio()
				if (this.type == 1) {
					this.one_minute(true);
				}
				this.timer = setInterval(() => {
					me.time = me.time + 1;
					me.showTime = me.getShowTime(me.time)
					me.reward = (Math.ceil(me.time / 60) * me.formatAptos(Number(me.feeInfo.videoFee || 0))).toFixed(5);
					if (me.time !== 0 && me.time % 60 === 0 && this.type == 1) {
						this.one_minute();
					}
				}, 1000);
			},
			// one_minute
			one_minute(isFirst = false) {
				let me = this;
				if (isFirst) {
					uni.$on('eventCallBack.one_minute', (event) => {
						const { isFirst: isBegin, type, payload, res, err } = event;
						if (!err && isBegin) {  
							const {
								from,
								to
							} = me.options;
							const userInfo = getUserInfo();
							callBegin({
								from,
								to,
								userCode: userInfo.userCode
							}).then((res) => {
								console.log('callBegin.res', res);
							}).catch((err) => {
								console.log('callBegin.err', err); 
							})
						}
					});
				}
				uni.$emit('eventChange', {
					type: 'one_minute',
					showLoading: false,
					isFirst,
					payload: {
						module: 'routel',
						func: 'one_minute',
						args: [me.other.address, me.feeInfo.grade],
						code: me.wallet.code,
					}
				});
			},
			sendVideoMsg(action) {
				const {
					from,
					to
				} = this.options;
				const msgOptions = {
					to: this.type == 1 ? to : from,
					chatType: 'singleChat',
					action,
					ext: {
						data: {
							from,
							to,
							channelCfg: this.channelCfg,
							showTime: this.showTime
						}
					},
				}
				uni.$emit('WebIM.sendMsg', ['cmd', msgOptions])
			},
			videoCall() {
				const {
					from,
					to
				} = this.options;
				const userInfo = getUserInfo();
				callRequest({
					from,
					to,
					userCode: userInfo.userCode
				}).then((res) => {
					console.log('videoCall.res', res);
					this.channelCfg = res.data || {};
					this.channelCfg.uid = Number(this.channelCfg.uid);
					this.sendVideoMsg('videoCall');
					this.joinChannel();
					this.timeoutHandler();
				}).catch((err) => {
					console.log('videoCall.err', err);
					this.sendVideoMsg('videoError');
					this.engine && this.engine.disableVideo();
					setTimeout(() => {
						uni.navigateBack({
							delta: 1,
						});
					}, 1500);
				})
			},
			videoReject() {
				const {
					from,
					to
				} = this.options;
				const userInfo = getUserInfo();
				callAccept({
					from,
					to,
					userCode: userInfo.userCode,
					accept: 0
				}).then((res) => {
					console.log('videoReject.res', res);
					this.sendVideoMsg('videoReject');
				}).catch((err) => {
					console.log('videoReject.err', err);
				});
			},
			videoEnd(msgType) {
				const {
					from,
					to
				} = this.options;
				const userInfo = getUserInfo();
				callEnd({
					from,
					to,
					userCode: userInfo.userCode,
				}).then((res) => {
					console.log('videoEnd.res', res);
					this.sendVideoMsg(msgType);
				}).catch((err) => {
					console.log('videoEnd.err', err);
				});
			},
			initData() {
				const {
					type,
					from,
					to
				} = this.options;
				this.type = type;
				const userInfo = getUserInfo();
				this.me = {
					userCode: userInfo.userCode,
					address: userInfo.address,
					name: userInfo.userName,
					portrait: userInfo.portrait,
					uid: Number(userInfo.userCode)
				};
				fetchUserInfo({
					userCode: type == 1 ? to : from
				}).then((res) => {
					let it = res.data || {};
					this.other = {
						userCode: it.userCode,
						address: it.address,
						name: it.userName,
						portrait: it.portrait,
						uid: Number(it.userCode)
					}
					if (this.type == 1) {
						this.videoCall();
					}
					this.getChatFee();
				});
			},
			async initEngine() {
				this.engine = await RtcEngine.create(config.appId);
				this.addListeners();
				await this.engine.enableVideo();
				await this.engine.startPreview();
				await this.engine.setChannelProfile(ChannelProfile.LiveBroadcasting);
				await this.engine.setClientRole(ClientRole.Broadcaster);
				const stateCode = await this.engine.getConnectionState();
				if (stateCode != 1) {
					this.leaveChannel()
				}
			},
			addListeners() {
				const me = this;
				uni.$on("WebIM.onCmdMessage", function([message]) {
					if (message.action === 'videoAccept') {
						const {
							channelCfg
						} = (message.ext || {}).data || {};
						me.otherUid = channelCfg.uid;
						me.runTime();
					} else if (['videoCancel', 'videoReject', 'videoEnd', 'videoError'].includes(message.action)) {
						me.engine && me.engine.disableVideo();
						setTimeout(() => {
							uni.navigateBack({
								delta: 1,
							});
						}, 1000)
					}
				});
				this.engine.addListener('JoinChannelSuccess', (channel, uid, elapsed) => {
					console.log('JoinChannelSuccess')
				});
				this.engine.addListener('Error', (channel, uid, elapsed) => {
					console.log('Error', channel, uid, elapsed)
					if (this.time) {
						this.sendVideoMsg('videoError');
						this.engine && this.engine.disableVideo();
						setTimeout(() => {
							uni.navigateBack();
						}, 1500); 
					}
				});
				this.engine.addListener('UserJoined', (uid, elapsed) => {
					console.log('UserJoined')
				});
				this.engine.addListener('UserOffline', (uid, reason) => {
					// me.confirmBack()
				});
			},
			joinChannel() {
				this.engine.joinChannel(
					this.channelCfg.token,
					this.channelCfg.channelName,
					null,
					this.channelCfg.uid
				).then(res => {
					if (this.type == 2) {
						this.otherUid = Number(this.options.from);
						this.runTime();
						this.sendVideoMsg('videoAccept');
					}
					console.log('joinChannel-res', res)
				}).catch(err => {
					uni.showToast({
						icon: "none",
						title: 'joinChannel Error',
						duration: 1000,
					});
				})
			},
			videoAnswer() {
				const {
					from,
					to
				} = this.options;
				const userInfo = getUserInfo();
				callAccept({
					from,
					to,
					userCode: userInfo.userCode,
					accept: 1
				}).then((res) => {
					this.channelCfg = res.data || {};
					this.channelCfg.uid = Number(this.channelCfg.uid);
					this.joinChannel();
					console.log('answer.res', res);
				}).catch((err) => {
					console.log('answer.err', err);
					this.engine && this.engine.disableVideo();
					this.sendVideoMsg('videoError');
					setTimeout(() => {
						uni.navigateBack();
					}, 1500);
				})
			},
			answer() {
				this.videoAnswer();
			},
			hangUp() {
				this.showPopup = true;
			},
			async leaveChannel() {
				await this.engine && this.engine.leaveChannel();
			},
			switchCamera() {
				this.engine &&
					this.engine.switchCamera()
					.then(() => {
						this.isSwitchCamera = !this.isSwitchCamera;
					})
					.catch((err) => {
						console.warn('switchCamera', err);
					});
			},
			switchRender() {
				this.isSwitchRender = !this.isSwitchRender;
			},
			back() {
				if (!this.time) {
					if (this.type == 1) {
						this.videoEnd('videoCancel');
					} else {
						this.videoReject();
					}
				} else {
					this.videoEnd('videoEnd');
				}
				this.engine && this.engine.disableVideo();
				setTimeout(() => {
					uni.navigateBack();
				}, 1000)
			},
		}
	}
</script>

<style lang="scss" scoped>
	.container {
		flex: 1;
		width: 750rpx;
		position: relative;

		.container-bg {
			width: 750rpx;
			flex: 1;
			position: relative;
			display: flex;

			.container-bg-mask {
				position: absolute;
				width: 750rpx;
				height: 3000rpx;
				background: #000000;
				opacity: 0.58;
			}

			.container-bg-image {
				width: 750rpx;
				height: 100%;
				flex: 1;
			}
		}

		.fill-view {
			width: 750rpx;
			flex: 1;
		}

		.window-view-wrapper {
			width: 150;
			height: 200;
			border-radius: 12;
			position: fixed;
			top: 145rpx;
			right: 22rpx;

			.window-view {
				width: 150;
				height: 200;
				border-radius: 12;
			}
		}


		.user-box {
			position: fixed;
			top: 384rpx;
			left: 0;
			width: 750rpx;
			display: flex;
			flex-direction: column;
			align-items: center;

			.portrait {
				width: 206rpx;
				height: 206rpx;
				margin-bottom: 31rpx;
				border: 9rpx solid #D7CEFF;
				border-radius: 50%;
				box-sizing: border-box;

				.portrait-image {
					width: 188rpx;
					height: 188rpx;
					border-radius: 50%;
				}

			}

			.userName .text {
				font-size: 65rpx;
				font-family: PingFangSC-Semibold, PingFang SC;
				font-weight: 600;
				color: #FFFFFF;
				line-height: 91rpx;
				margin-bottom: 16rpx;
			}

			.price {
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: center;
				width: 750rpx;

				.price-prefix {
					font-size: 36rpx;
					font-family: PingFangSC-Semibold, PingFang SC;
					font-weight: 600;
					color: #FFFFFF;
					line-height: 51rpx;
					margin-right: 16rpx;
				}

				.price-icon {
					width: 49rpx;
					height: 45rpx;
					margin-right: 14rpx;
				}

				.price-text {
					font-size: 36rpx;
					font-family: PingFangSC-Semibold, PingFang SC;
					font-weight: 600;
					color: #FFFFFF;
					line-height: 51rpx;
				}
			}
		}

		.control-box {
			position: fixed;
			bottom: 254rpx;
			left: 0;
			width: 750rpx;
			display: flex;
			flex-direction: column;
			align-items: center;

			.wait-time {
				font-size: 48rpx;
				font-family: PingFangSC-Semibold, PingFang SC;
				font-weight: 400;
				color: #3DD42D;
				line-height: 64rpx;
			}

			.control-text {
				font-size: 25rpx;
				font-family: PingFangSC-Regular, PingFang SC;
				font-weight: 400;
				color: #FFFFFF;
				line-height: 36rpx;
			}

			.control-btns {
				display: flex;
				align-items: center;
				flex-direction: row;

				.control-btn-icon {
					width: 208rpx;
					height: 208rpx;

					&.answer {
						margin-left: 47rpx;
					}
				}
			}
		}

		.reward-text-wrapper {
			position: fixed;
			height: 40rpx;
			bottom: 174rpx;
			left: 110rpx;

			.reward-text {
				font-size: 29rpx;
				font-family: PingFangSC-Medium, PingFang SC;
				font-weight: 500;
				color: #E4E9FF;
				line-height: 40rpx;
			}
		}

		.reward-view {
			position: fixed;
			bottom: 98rpx;
			left: 71rpx;
			width: 625rpx;
			height: 96rpx;
			display: flex;
			flex-direction: column;
			align-items: center;
			border-radius: 24rpx;
			// border-color: #E4E9FF;
			// border-width:0 2rpx 2rpx 2rpx;
			opacity: 0.8;
			background: rgba(39, 42, 57, 0.2);

			.left-border {
				position: absolute;
				left: 0;
				top: 0;
				width: 30rpx;
				height: 96rpx;
				border-radius: 24rpx 0 0 24rpx;
				border-color: #E4E9FF;
				border-width: 2rpx 0rpx 2rpx 2rpx;
			}

			.bottom-border {
				position: absolute;
				left: 30rpx;
				bottom: 0;
				width: 565rpx;
				height: 2rpx;
				background: #E4E9FF;
			}

			.right-border {
				position: absolute;
				right: 0;
				top: 0;
				width: 30rpx;
				height: 96rpx;
				border-radius: 0rpx 24rpx 24rpx 0;
				border-color: #E4E9FF;
				border-width: 2rpx 2rpx 2rpx 0rpx;
			}

			.top-border {
				position: absolute;
				right: 30rpx;
				top: 0;
				width: 455rpx;
				height: 2rpx;
				background: #E4E9FF;
			}

			.reward-items {
				width: 625rpx;
				height: 96rpx;
				flex: 1;
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: center;

				.reward-item {
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: center;

					&.first {
						margin-right: 72rpx;
					}

					.left-icon {
						width: 34rpx;
						height: 31rpx;
						flex: 0 0 34rpx;
					}

					.reward-item-content {
						margin: 0 2rpx;
						display: flex;
						justify-content: center;

						.text {
							font-size: 25rpx;
							font-family: PingFangSC-Medium, PingFang SC;
							font-weight: 500;
							color: #FFFFFF;
							line-height: 36rpx;
						}
					}

					.right-icon {
						width: 20rpx;
						height: 27rpx;
						flex: 0 0 20rpx;
					}
				}
			}
		}

		.popup-content {
			position: fixed;
			width: 560rpx;
			height: 384rpx;
			top: 476rpx;
			left: 96rpx;

			.dialog-bg {
				width: 560rpx;
				height: 384rpx;
				position: relative;
			}

			.title {
				width: 560rpx;
				line-height: 45rpx;
				text-align: center;
				position: absolute;
				left: 0;
				top: 132rpx;
				font-size: 33rpx;
				font-family: PingFangSC-Regular, PingFang SC;
				font-weight: 400;
				color: #000000;
			}

			.btns {
				position: absolute;
				left: 0;
				bottom: 0;
				width: 560rpx;
				display: flex;
				flex-direction: row;
				align-items: center;

				.btn {
					flex: 1;
					text-align: center;
					font-size: 33rpx;

					.text {
						line-height: 104rpx;
						text-align: center;
					}

					&.btn-cancel .text {
						color: #d841ff;
					}

					&.btn-confirm .text {
						color: #fff;
					}
				}
			}
		}
	}
</style>
